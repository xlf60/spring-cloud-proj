server:
  port: 21000
  # 压缩
  compression:
    enabled: true
  error:
    include-exception: true
   # include-stacktrace: on_param
    include-message: always
spring:
  #允许bean存在
  main:
    allow-bean-definition-overriding: true

  application:
    name: employee-service
  sleuth:
    sampler:
      # 采样率100%
      probability: 1
      #每秒最多采用100个trace
      rate: 100

#  zipkin:
#    sender:
#      type: rabbit
#    rabbitmq:
#      passwd: guest
#      username: guest
#      queue: zipkin
#      addresses: 47.120.15.216:5672
#    sender:
#      type: web
#    discoveryClientEnabled: true
#    baseUrl: http://zipkin-server
#    locator:
#      discovery:
#        enabled: true

  cloud:
    sentinel:
      transport:
        port: 8719
        dashboard: localhost:8080
    alibaba:
      seata:
        txServiceGroup: seata-server
    loadbalancer:
#      ribbon:
#        enabled: false
      cache:
        enabled: true
        ttl: 3500
        capacity: 998
    nacos:
      discovery:
        server-addr: localhost:8848
#        server-addr: 47.120.15.216:8848
        clusterName: Cluster-2
#        metadata:
#          myname: xlf
#          mylover: xxx

        # 心跳间隔时间(毫秒)
#        heartBeatInterval: 5000
        #服务剔除的时间(标记不健康)
#        heartBeatTimeout: 15000
        # 防止意外宕机的防范措施
#        namingLoadCacheAtStart: false
#        clusterName: Cluster-2
#        namespace: ab65b115-a900-44b3-9053-4378e0fb49b3
#        group: myGroup
#        #是否可以注册,默认是TRUE
#        registerEnabled: true
#        watchDelay: 30000
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
    open-in-view: false

  datasource:
    url: jdbc:mysql://127.0.0.1:3306/employee_db?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=Asia/Shanghai
    username: root
    password: 111111
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    #  spring.datasource.url=jdbc:mysql://localhost:3306/powernode?serverTimezone=GMT
    #  spring.datasource.username=root
    #  spring.datasource.password=123456
    hikari:
      connection-timeout: 20000
      idle-timeout: 20000
      maximum-pool-size: 20
      minimum-idle: 5
      max-lifetime: 30000
      auto-commit: true
      pool-name: imoocDatasourcePool

restroom-service:
  ribbon:
    # 指定负载均衡策略
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule
#    NFLoadBalancerRuleClassName: com.xxlf.employee.loadbalancer.ClusterFirstRule
    NFLoadBalancerRuleClassName: com.xlf.employee.loadbalancer.CustomeRule
#    NFLoadBalancerPingClassName
    eager-load:
      enabled: true
      clients: restroom-service
    ConnectTimeout: 1000  #服务请求的连接超时时间
    ReadTimeout: 2000  # 服务请求处理超时时间
    # post put delete 确保幂等性
    OkToRetryOnAllOperations: true #是否对所有请求启动重试机制
    MaxAutoRetries: 1 # 每个实例重试次数
    MaxAutoRetriesNextServer: 1 #切换几个实例进行测试
#

# 饥饿加载(懒加载)
#ribbon:
#  eager-load:
#    enabled: true
#    clients: restroom-service
#  ConnectTimeout: 1000  #服务请求的连接超时时间
#  ReadTimeout: 1000  # 服务请求处理超时时间
#  # post put delete 确保幂等性
#  OkToRetryOnAllOperations: true #是否对所有请求启动重试机制
#  MaxAutoRetries: 2 # 每个实例重试次数(当前机器2+1)
#  MaxAutoRetriesNextServer: 2 #切换几个实例进行测试
feign:
#  hystrix:
#    enabled: true
  # 压缩
  compression:
    request:
      enabled: true
      minRequestSize: 1024
    response:
      enable: true
      useGzipDecoder: true #响应解压
  client:
    # 和ribbon的超时有冲突， 建议使用ribbon
    default:
      connectTimeout: 1000
      readTimeout: 5000
    restroom-service:
      connectTimeout: 1000
      readTimeout: 5000

management:
  endpoint:
    health:
      show-components: always
  endpoints:
    web:
      exposure:
        include: '*'
  security:
    enabled: false

logging:
  level:
    ROOT: info
    com.xlf.employee.feign.RestroomFeignClient: debug
  pattern:
    dateformat:
      HH:mm:ss.SSS

seata:
  applicationId: employee-service
  registry:
    type: nacos
    nacos:
      serverAddr: 127.0.0.1:8848
#      serverAddr: 47.120.15.216:8848
      application: seata-server
      namespace: public
      cluster: default
      group: DEFAULT_GROUP
  service:
    vgroupMapping:
      seata-server: default


hystrix:
  command:
    #全局配置
    default:
      fallback:
        enabled: true   #开启降级
    #局部配置
#    hystrixTest

      circuitBreaker:
        enabled: true
        requestVolumeThreshold: 3  #熔断触发的最小个数10s 默认值：20
        sleepWindowInMilliseconds: 10000  #熔断多少秒后去尝试请求  默认值：5000
        errorThresholdPercentage: 50 #失败率达到多少百分比后熔断 默认值：50
      metrics:
        rollingStats:
          timeInMilliseconds: 20000 #滚动窗口的持续时间
    #      numBuckets: 10  #窗口划分的桶数
    #    rollingPercentile:
    #      enabled: true   #是否应以百分位数跟踪和计算执行延迟
    #      timeInMilliseconds: 60000 #设置滚动窗口的持续时间
    #      numBuckets: 6 #窗口将划分的桶的数量
    #      bucketSize: 1000 #每个存储桶保留的最大执行次数
    #    healthSnapshot:
    #      intervalInMilliseconds: 500 #健康快照之间等待的时间

      execution:
        timeout:
          #是否应该有超时
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 3000 #全局超时时间  默认值：1000
            interruptOnTimeout: true    #超时后是否中断线程 默认值：true
            interruptOnCancel: true     # 取消调用后是否中断线程，默认值为false
        semaphore:
          maxConcurrentRequests: 10     #最大并发请求数 默认值：10


#security:
#  oauth2:
#    resource:
#      userInfoUri: http://localhost:50000/user/endpoint  #oauth-service中的user
#    authorization:
#      checkTokenAccess: http://localhost:50000/oauth/check_token
#    client:
#      accessTokenUri: http://localhost:50000/oauth/token
#      clientId: client-a
#      clientSecret: XLF
#      userAuthorizationUri: http://localhost:50000/oauth/authorize